// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result service
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package result

import (
	"context"

	resultviews "github.com/ynoacamino/alert-go/gen/result/views"
)

// Service to collect data about the payment slip
type Service interface {
	// ListResults implements listResults.
	ListResults(context.Context, *ListResultsPayload) (res *Resultlist, err error)
	// CreateResult implements createResult.
	CreateResult(context.Context, *ResultPayload) (res *Result, err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "MailAddresses"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Result"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [2]string{"listResults", "createResult"}

// ListResultsPayload is the payload type of the Result service listResults
// method.
type ListResultsPayload struct {
	// Page number
	Page int
	// Items per page
	Limit int
}

// Result is the result type of the Result service createResult method.
type Result struct {
	// Unique result ID
	ID string
	// Created at date of scrape
	CreatedAt string
	// Updated at date of scrape
	UpdateAt string
	// Status result of scrape
	Status string
}

// ResultPayload is the payload type of the Result service createResult method.
type ResultPayload struct {
	// Status result of scrape
	Status *string
}

// Resultlist is the result type of the Result service listResults method.
type Resultlist struct {
	Data []*Result
	// Page number
	Page int
	// Items per page
	Limit int
	// Total number of results
	Total int
}

// NewResultlist initializes result type Resultlist from viewed result type
// Resultlist.
func NewResultlist(vres *resultviews.Resultlist) *Resultlist {
	return newResultlist(vres.Projected)
}

// NewViewedResultlist initializes viewed result type Resultlist from result
// type Resultlist using the given view.
func NewViewedResultlist(res *Resultlist, view string) *resultviews.Resultlist {
	p := newResultlistView(res)
	return &resultviews.Resultlist{Projected: p, View: "default"}
}

// newResultlist converts projected type Resultlist to service type Resultlist.
func newResultlist(vres *resultviews.ResultlistView) *Resultlist {
	res := &Resultlist{}
	if vres.Page != nil {
		res.Page = *vres.Page
	}
	if vres.Limit != nil {
		res.Limit = *vres.Limit
	}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Data != nil {
		res.Data = make([]*Result, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = transformResultviewsResultViewToResult(val)
		}
	}
	return res
}

// newResultlistView projects result type Resultlist to projected type
// ResultlistView using the "default" view.
func newResultlistView(res *Resultlist) *resultviews.ResultlistView {
	vres := &resultviews.ResultlistView{
		Page:  &res.Page,
		Limit: &res.Limit,
		Total: &res.Total,
	}
	if res.Data != nil {
		vres.Data = make([]*resultviews.ResultView, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = transformResultToResultviewsResultView(val)
		}
	} else {
		vres.Data = []*resultviews.ResultView{}
	}
	return vres
}

// transformResultviewsResultViewToResult builds a value of type *Result from a
// value of type *resultviews.ResultView.
func transformResultviewsResultViewToResult(v *resultviews.ResultView) *Result {
	if v == nil {
		return nil
	}
	res := &Result{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		UpdateAt:  *v.UpdateAt,
		Status:    *v.Status,
	}

	return res
}

// transformResultToResultviewsResultView builds a value of type
// *resultviews.ResultView from a value of type *Result.
func transformResultToResultviewsResultView(v *Result) *resultviews.ResultView {
	res := &resultviews.ResultView{
		ID:        &v.ID,
		CreatedAt: &v.CreatedAt,
		UpdateAt:  &v.UpdateAt,
		Status:    &v.Status,
	}

	return res
}
