// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result views
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Resultlist is the viewed result type that is projected based on a view.
type Resultlist struct {
	// Type to project
	Projected *ResultlistView
	// View to render
	View string
}

// ResultlistView is a type that runs validations on a projected type.
type ResultlistView struct {
	Data []*ResultView
	// Page number
	Page *int
	// Items per page
	Limit *int
	// Total number of results
	Total *int
}

// ResultView is a type that runs validations on a projected type.
type ResultView struct {
	// Unique result ID
	ID *string
	// Created at date of scrape
	CreatedAt *string
	// Updated at date of scrape
	UpdateAt *string
	// Status result of scrape
	Status *string
}

var (
	// ResultlistMap is a map indexing the attribute names of Resultlist by view
	// name.
	ResultlistMap = map[string][]string{
		"default": {
			"data",
			"page",
			"limit",
			"total",
		},
	}
)

// ValidateResultlist runs the validations defined on the viewed result type
// Resultlist.
func ValidateResultlist(result *Resultlist) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateResultlistView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateResultlistView runs the validations defined on ResultlistView using
// the "default" view.
func ValidateResultlistView(result *ResultlistView) (err error) {
	if result.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "result"))
	}
	if result.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "result"))
	}
	if result.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "result"))
	}
	if result.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "result"))
	}
	for _, e := range result.Data {
		if e != nil {
			if err2 := ValidateResultView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateResultView runs the validations defined on ResultView.
func ValidateResultView(result *ResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Status == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("status", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "result"))
	}
	if result.UpdateAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updateAt", "result"))
	}
	return
}
