// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: result.sql

package db

import (
	"context"
)

const createResult = `-- name: CreateResult :one
INSERT INTO
    result (id, status)
VALUES
    (?, ?) RETURNING id, status, createdat, updatedat
`

type CreateResultParams struct {
	ID     string
	Status string
}

func (q *Queries) CreateResult(ctx context.Context, arg CreateResultParams) (Result, error) {
	row := q.db.QueryRowContext(ctx, createResult, arg.ID, arg.Status)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const deleteResult = `-- name: DeleteResult :exec
DELETE FROM result
WHERE
    id = ?
`

func (q *Queries) DeleteResult(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteResult, id)
	return err
}

const getResult = `-- name: GetResult :one
SELECT
    id, status, createdat, updatedat
FROM
    result
WHERE
    id = ?
`

func (q *Queries) GetResult(ctx context.Context, id string) (Result, error) {
	row := q.db.QueryRowContext(ctx, getResult, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Createdat,
		&i.Updatedat,
	)
	return i, err
}

const listAllResults = `-- name: ListAllResults :many
SELECT
    id, status, createdat, updatedat
FROM
    result
ORDER BY
    updatedAt DESC
`

func (q *Queries) ListAllResults(ctx context.Context) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, listAllResults)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listResults = `-- name: ListResults :many
SELECT
    id, status, createdat, updatedat
FROM
    result
ORDER BY
    updatedAt DESC
LIMIT
    ?
OFFSET
    ?
`

type ListResultsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListResults(ctx context.Context, arg ListResultsParams) ([]Result, error) {
	rows, err := q.db.QueryContext(ctx, listResults, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Result
	for rows.Next() {
		var i Result
		if err := rows.Scan(
			&i.ID,
			&i.Status,
			&i.Createdat,
			&i.Updatedat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResult = `-- name: UpdateResult :exec
UPDATE result
SET
    status = ?,
    updatedAt = CURRENT_TIMESTAMP
WHERE
    id = ?
`

type UpdateResultParams struct {
	Status string
	ID     string
}

func (q *Queries) UpdateResult(ctx context.Context, arg UpdateResultParams) error {
	_, err := q.db.ExecContext(ctx, updateResult, arg.Status, arg.ID)
	return err
}
