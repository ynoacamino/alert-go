// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses service
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package mailaddresses

import (
	"context"

	mailaddressesviews "github.com/ynoacamino/alert-go/gen/mail_addresses/views"
	goa "goa.design/goa/v3/pkg"
)

// Servicio de recoleccion de datos sobre el talon de pago
type Service interface {
	// ListMailAddresses implements listMailAddresses.
	ListMailAddresses(context.Context, *ListMailAddressesPayload) (res *Maillist, err error)
	// Get mail address by ID
	GetMailAddresses(context.Context, *GetMailAddressesPayload) (res *Mail, err error)
	// CreateMailAddress implements createMailAddress.
	CreateMailAddress(context.Context, *MailPayload) (res *Mail, err error)
	// UpdateMailAddress implements updateMailAddress.
	UpdateMailAddress(context.Context, *UpdateMailAddressPayload) (res *Mail, err error)
	// DeleteMailAddress implements deleteMailAddress.
	DeleteMailAddress(context.Context, *DeleteMailAddressPayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "MailAddresses"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "MailAddresses"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"listMailAddresses", "getMailAddresses", "createMailAddress", "updateMailAddress", "deleteMailAddress"}

// DeleteMailAddressPayload is the payload type of the MailAddresses service
// deleteMailAddress method.
type DeleteMailAddressPayload struct {
	// Unique mail ID
	ID string
}

// GetMailAddressesPayload is the payload type of the MailAddresses service
// getMailAddresses method.
type GetMailAddressesPayload struct {
	// Unique mail ID
	ID string
}

// ListMailAddressesPayload is the payload type of the MailAddresses service
// listMailAddresses method.
type ListMailAddressesPayload struct {
	// Page number
	Page int
	// Items per page
	Limit int
}

// Mail is the result type of the MailAddresses service getMailAddresses method.
type Mail struct {
	// Unique mail ID
	ID string
	// Created at date of mail
	CreatedAt string
	// Updated at date of mail
	UpdateAt string
	// Address of user mail
	Address string
	// Status of email address
	Active bool
}

// MailPayload is the payload type of the MailAddresses service
// createMailAddress method.
type MailPayload struct {
	// Address of user mail
	Address *string
	// Status of email address
	Active bool
}

// Maillist is the result type of the MailAddresses service listMailAddresses
// method.
type Maillist struct {
	Data []*Mail
	// Page number
	Page int
	// Items per page
	Limit int
	// Total number of mails
	Total int
}

// UpdateMailAddressPayload is the payload type of the MailAddresses service
// updateMailAddress method.
type UpdateMailAddressPayload struct {
	// Unique mail ID
	ID string
	// Address of user mail
	Address string
	// Status of email address
	Active bool
}

// MakeNotFound builds a goa.ServiceError from an error.
func MakeNotFound(err error) *goa.ServiceError {
	return goa.NewServiceError(err, "not_found", false, false, false)
}

// NewMaillist initializes result type Maillist from viewed result type
// Maillist.
func NewMaillist(vres *mailaddressesviews.Maillist) *Maillist {
	return newMaillist(vres.Projected)
}

// NewViewedMaillist initializes viewed result type Maillist from result type
// Maillist using the given view.
func NewViewedMaillist(res *Maillist, view string) *mailaddressesviews.Maillist {
	p := newMaillistView(res)
	return &mailaddressesviews.Maillist{Projected: p, View: "default"}
}

// newMaillist converts projected type Maillist to service type Maillist.
func newMaillist(vres *mailaddressesviews.MaillistView) *Maillist {
	res := &Maillist{}
	if vres.Page != nil {
		res.Page = *vres.Page
	}
	if vres.Limit != nil {
		res.Limit = *vres.Limit
	}
	if vres.Total != nil {
		res.Total = *vres.Total
	}
	if vres.Data != nil {
		res.Data = make([]*Mail, len(vres.Data))
		for i, val := range vres.Data {
			res.Data[i] = transformMailaddressesviewsMailViewToMail(val)
		}
	}
	return res
}

// newMaillistView projects result type Maillist to projected type MaillistView
// using the "default" view.
func newMaillistView(res *Maillist) *mailaddressesviews.MaillistView {
	vres := &mailaddressesviews.MaillistView{
		Page:  &res.Page,
		Limit: &res.Limit,
		Total: &res.Total,
	}
	if res.Data != nil {
		vres.Data = make([]*mailaddressesviews.MailView, len(res.Data))
		for i, val := range res.Data {
			vres.Data[i] = transformMailToMailaddressesviewsMailView(val)
		}
	} else {
		vres.Data = []*mailaddressesviews.MailView{}
	}
	return vres
}

// transformMailaddressesviewsMailViewToMail builds a value of type *Mail from
// a value of type *mailaddressesviews.MailView.
func transformMailaddressesviewsMailViewToMail(v *mailaddressesviews.MailView) *Mail {
	if v == nil {
		return nil
	}
	res := &Mail{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		UpdateAt:  *v.UpdateAt,
		Address:   *v.Address,
		Active:    *v.Active,
	}

	return res
}

// transformMailToMailaddressesviewsMailView builds a value of type
// *mailaddressesviews.MailView from a value of type *Mail.
func transformMailToMailaddressesviewsMailView(v *Mail) *mailaddressesviews.MailView {
	res := &mailaddressesviews.MailView{
		ID:        &v.ID,
		CreatedAt: &v.CreatedAt,
		UpdateAt:  &v.UpdateAt,
		Address:   &v.Address,
		Active:    &v.Active,
	}

	return res
}
