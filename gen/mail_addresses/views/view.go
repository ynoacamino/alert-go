// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses views
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package views

import (
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// Maillist is the viewed result type that is projected based on a view.
type Maillist struct {
	// Type to project
	Projected *MaillistView
	// View to render
	View string
}

// MaillistView is a type that runs validations on a projected type.
type MaillistView struct {
	Data []*MailView
	// Page number
	Page *int
	// Items per page
	Limit *int
	// Total number of mails
	Total *int
}

// MailView is a type that runs validations on a projected type.
type MailView struct {
	// Unique mail ID
	ID *string
	// Created at date of mail
	CreatedAt *string
	// Updated at date of mail
	UpdateAt *string
	// Address of user mail
	Address *string
	// Status of email address
	Active *bool
}

var (
	// MaillistMap is a map indexing the attribute names of Maillist by view name.
	MaillistMap = map[string][]string{
		"default": {
			"data",
			"page",
			"limit",
			"total",
		},
	}
)

// ValidateMaillist runs the validations defined on the viewed result type
// Maillist.
func ValidateMaillist(result *Maillist) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMaillistView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMaillistView runs the validations defined on MaillistView using the
// "default" view.
func ValidateMaillistView(result *MaillistView) (err error) {
	if result.Data == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("data", "result"))
	}
	if result.Page == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("page", "result"))
	}
	if result.Limit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("limit", "result"))
	}
	if result.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "result"))
	}
	for _, e := range result.Data {
		if e != nil {
			if err2 := ValidateMailView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMailView runs the validations defined on MailView.
func ValidateMailView(result *MailView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	if result.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "result"))
	}
	if result.UpdateAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updateAt", "result"))
	}
	if result.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("result.address", *result.Address, goa.FormatEmail))
	}
	if result.Address != nil {
		if utf8.RuneCountInString(*result.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("result.address", *result.Address, utf8.RuneCountInString(*result.Address), 1, true))
		}
	}
	return
}
