// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result HTTP server encoders and decoders
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package server

import (
	"context"
	"errors"
	"io"
	"net/http"
	"strconv"

	result "github.com/ynoacamino/alert-go/gen/result"
	resultviews "github.com/ynoacamino/alert-go/gen/result/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListResultsResponse returns an encoder for responses returned by the
// Result listResults endpoint.
func EncodeListResultsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*resultviews.Resultlist)
		enc := encoder(ctx, w)
		body := NewListResultsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListResultsRequest returns a decoder for requests sent to the Result
// listResults endpoint.
func DecodeListResultsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			page  int
			limit int
			err   error
		)
		qp := r.URL.Query()
		{
			pageRaw := qp.Get("page")
			if pageRaw == "" {
				page = 1
			} else {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				page = int(v)
			}
		}
		if page < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 0, true))
		}
		{
			limitRaw := qp.Get("limit")
			if limitRaw == "" {
				limit = 10
			} else {
				v, err2 := strconv.ParseInt(limitRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("limit", limitRaw, "integer"))
				}
				limit = int(v)
			}
		}
		if limit < 0 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 0, true))
		}
		if limit > 100 {
			err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
		}
		if err != nil {
			return nil, err
		}
		payload := NewListResultsPayload(page, limit)

		return payload, nil
	}
}

// EncodeCreateResultResponse returns an encoder for responses returned by the
// Result createResult endpoint.
func EncodeCreateResultResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(*result.Result)
		enc := encoder(ctx, w)
		body := NewCreateResultResponseBody(res)
		w.WriteHeader(http.StatusCreated)
		return enc.Encode(body)
	}
}

// DecodeCreateResultRequest returns a decoder for requests sent to the Result
// createResult endpoint.
func DecodeCreateResultRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			body CreateResultRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			var gerr *goa.ServiceError
			if errors.As(err, &gerr) {
				return nil, gerr
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		payload := NewCreateResultResultPayload(&body)

		return payload, nil
	}
}

// marshalResultviewsResultViewToResultResponseBody builds a value of type
// *ResultResponseBody from a value of type *resultviews.ResultView.
func marshalResultviewsResultViewToResultResponseBody(v *resultviews.ResultView) *ResultResponseBody {
	res := &ResultResponseBody{
		ID:        *v.ID,
		CreatedAt: *v.CreatedAt,
		UpdateAt:  *v.UpdateAt,
		Status:    *v.Status,
	}

	return res
}
