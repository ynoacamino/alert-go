// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result HTTP server types
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package server

import (
	result "github.com/ynoacamino/alert-go/gen/result"
	resultviews "github.com/ynoacamino/alert-go/gen/result/views"
)

// CreateResultRequestBody is the type of the "Result" service "createResult"
// endpoint HTTP request body.
type CreateResultRequestBody struct {
	// Status result of scrape
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// ListResultsResponseBody is the type of the "Result" service "listResults"
// endpoint HTTP response body.
type ListResultsResponseBody struct {
	Data []*ResultResponseBody `form:"data" json:"data" xml:"data"`
	// Page number
	Page int `form:"page" json:"page" xml:"page"`
	// Items per page
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Total number of results
	Total int `form:"total" json:"total" xml:"total"`
}

// CreateResultResponseBody is the type of the "Result" service "createResult"
// endpoint HTTP response body.
type CreateResultResponseBody struct {
	// Unique result ID
	ID string `form:"id" json:"id" xml:"id"`
	// Created at date of scrape
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Updated at date of scrape
	UpdateAt string `form:"updateAt" json:"updateAt" xml:"updateAt"`
	// Status result of scrape
	Status string `form:"status" json:"status" xml:"status"`
}

// ResultResponseBody is used to define fields on response body types.
type ResultResponseBody struct {
	// Unique result ID
	ID string `form:"id" json:"id" xml:"id"`
	// Created at date of scrape
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Updated at date of scrape
	UpdateAt string `form:"updateAt" json:"updateAt" xml:"updateAt"`
	// Status result of scrape
	Status string `form:"status" json:"status" xml:"status"`
}

// NewListResultsResponseBody builds the HTTP response body from the result of
// the "listResults" endpoint of the "Result" service.
func NewListResultsResponseBody(res *resultviews.ResultlistView) *ListResultsResponseBody {
	body := &ListResultsResponseBody{
		Page:  *res.Page,
		Limit: *res.Limit,
		Total: *res.Total,
	}
	if res.Data != nil {
		body.Data = make([]*ResultResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalResultviewsResultViewToResultResponseBody(val)
		}
	} else {
		body.Data = []*ResultResponseBody{}
	}
	return body
}

// NewCreateResultResponseBody builds the HTTP response body from the result of
// the "createResult" endpoint of the "Result" service.
func NewCreateResultResponseBody(res *result.Result) *CreateResultResponseBody {
	body := &CreateResultResponseBody{
		ID:        res.ID,
		CreatedAt: res.CreatedAt,
		UpdateAt:  res.UpdateAt,
		Status:    res.Status,
	}
	return body
}

// NewListResultsPayload builds a Result service listResults endpoint payload.
func NewListResultsPayload(page int, limit int) *result.ListResultsPayload {
	v := &result.ListResultsPayload{}
	v.Page = page
	v.Limit = limit

	return v
}

// NewCreateResultResultPayload builds a Result service createResult endpoint
// payload.
func NewCreateResultResultPayload(body *CreateResultRequestBody) *result.ResultPayload {
	v := &result.ResultPayload{
		Status: body.Status,
	}

	return v
}
