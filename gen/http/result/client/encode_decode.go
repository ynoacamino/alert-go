// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io"
	"net/http"
	"net/url"

	result "github.com/ynoacamino/alert-go/gen/result"
	resultviews "github.com/ynoacamino/alert-go/gen/result/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListResultsRequest instantiates a HTTP request object with method and
// path set to call the "Result" service "listResults" endpoint
func (c *Client) BuildListResultsRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListResultsResultPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Result", "listResults", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListResultsRequest returns an encoder for requests sent to the Result
// listResults server.
func EncodeListResultsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*result.ListResultsPayload)
		if !ok {
			return goahttp.ErrInvalidType("Result", "listResults", "*result.ListResultsPayload", v)
		}
		values := req.URL.Query()
		values.Add("page", fmt.Sprintf("%v", p.Page))
		values.Add("limit", fmt.Sprintf("%v", p.Limit))
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListResultsResponse returns a decoder for responses returned by the
// Result listResults endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListResultsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListResultsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Result", "listResults", err)
			}
			p := NewListResultsResultlistOK(&body)
			view := "default"
			vres := &resultviews.Resultlist{Projected: p, View: view}
			if err = resultviews.ValidateResultlist(vres); err != nil {
				return nil, goahttp.ErrValidationError("Result", "listResults", err)
			}
			res := result.NewResultlist(vres)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Result", "listResults", resp.StatusCode, string(body))
		}
	}
}

// BuildCreateResultRequest instantiates a HTTP request object with method and
// path set to call the "Result" service "createResult" endpoint
func (c *Client) BuildCreateResultRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CreateResultResultPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Result", "createResult", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeCreateResultRequest returns an encoder for requests sent to the Result
// createResult server.
func EncodeCreateResultRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*result.ResultPayload)
		if !ok {
			return goahttp.ErrInvalidType("Result", "createResult", "*result.ResultPayload", v)
		}
		body := NewCreateResultRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Result", "createResult", err)
		}
		return nil
	}
}

// DecodeCreateResultResponse returns a decoder for responses returned by the
// Result createResult endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeCreateResultResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusCreated:
			var (
				body CreateResultResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Result", "createResult", err)
			}
			err = ValidateCreateResultResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Result", "createResult", err)
			}
			res := NewCreateResultResultCreated(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Result", "createResult", resp.StatusCode, string(body))
		}
	}
}

// unmarshalResultResponseBodyToResultviewsResultView builds a value of type
// *resultviews.ResultView from a value of type *ResultResponseBody.
func unmarshalResultResponseBodyToResultviewsResultView(v *ResultResponseBody) *resultviews.ResultView {
	res := &resultviews.ResultView{
		ID:        v.ID,
		CreatedAt: v.CreatedAt,
		UpdateAt:  v.UpdateAt,
		Status:    v.Status,
	}

	return res
}
