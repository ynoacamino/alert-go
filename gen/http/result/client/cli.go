// Code generated by goa v3.20.0, DO NOT EDIT.
//
// Result HTTP client CLI support package
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package client

import (
	"encoding/json"
	"fmt"
	"strconv"

	result "github.com/ynoacamino/alert-go/gen/result"
	goa "goa.design/goa/v3/pkg"
)

// BuildListResultsPayload builds the payload for the Result listResults
// endpoint from CLI flags.
func BuildListResultsPayload(resultListResultsPage string, resultListResultsLimit string) (*result.ListResultsPayload, error) {
	var err error
	var page int
	{
		if resultListResultsPage != "" {
			var v int64
			v, err = strconv.ParseInt(resultListResultsPage, 10, strconv.IntSize)
			page = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
			if page < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("page", page, 0, true))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	var limit int
	{
		if resultListResultsLimit != "" {
			var v int64
			v, err = strconv.ParseInt(resultListResultsLimit, 10, strconv.IntSize)
			limit = int(v)
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
			if limit < 0 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 0, true))
			}
			if limit > 100 {
				err = goa.MergeErrors(err, goa.InvalidRangeError("limit", limit, 100, false))
			}
			if err != nil {
				return nil, err
			}
		}
	}
	v := &result.ListResultsPayload{}
	v.Page = page
	v.Limit = limit

	return v, nil
}

// BuildCreateResultPayload builds the payload for the Result createResult
// endpoint from CLI flags.
func BuildCreateResultPayload(resultCreateResultBody string) (*result.ResultPayload, error) {
	var err error
	var body CreateResultRequestBody
	{
		err = json.Unmarshal([]byte(resultCreateResultBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"status\": \"AVAILABLE, NOT_AVAILABLE or TIMEOUT\"\n   }'")
		}
	}
	v := &result.ResultPayload{
		Status: body.Status,
	}

	return v, nil
}
