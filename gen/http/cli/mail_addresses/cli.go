// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses HTTP client CLI support package
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	mailaddressesc "github.com/ynoacamino/alert-go/gen/http/mail_addresses/client"
	resultc "github.com/ynoacamino/alert-go/gen/http/result/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//	command (subcommand1|subcommand2|...)
func UsageCommands() string {
	return `mail-addresses (list-mail-addresses|get-mail-addresses|create-mail-address|update-mail-address|delete-mail-address)
result (list-results|create-result)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` mail-addresses list-mail-addresses --page 8115965748327412379 --limit 92` + "\n" +
		os.Args[0] + ` result list-results --page 1230015249540505935 --limit 18` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, any, error) {
	var (
		mailAddressesFlags = flag.NewFlagSet("mail-addresses", flag.ContinueOnError)

		mailAddressesListMailAddressesFlags     = flag.NewFlagSet("list-mail-addresses", flag.ExitOnError)
		mailAddressesListMailAddressesPageFlag  = mailAddressesListMailAddressesFlags.String("page", "1", "")
		mailAddressesListMailAddressesLimitFlag = mailAddressesListMailAddressesFlags.String("limit", "10", "")

		mailAddressesGetMailAddressesFlags  = flag.NewFlagSet("get-mail-addresses", flag.ExitOnError)
		mailAddressesGetMailAddressesIDFlag = mailAddressesGetMailAddressesFlags.String("id", "REQUIRED", "Unique mail ID")

		mailAddressesCreateMailAddressFlags    = flag.NewFlagSet("create-mail-address", flag.ExitOnError)
		mailAddressesCreateMailAddressBodyFlag = mailAddressesCreateMailAddressFlags.String("body", "REQUIRED", "")

		mailAddressesUpdateMailAddressFlags    = flag.NewFlagSet("update-mail-address", flag.ExitOnError)
		mailAddressesUpdateMailAddressBodyFlag = mailAddressesUpdateMailAddressFlags.String("body", "REQUIRED", "")
		mailAddressesUpdateMailAddressIDFlag   = mailAddressesUpdateMailAddressFlags.String("id", "REQUIRED", "Unique mail ID")

		mailAddressesDeleteMailAddressFlags  = flag.NewFlagSet("delete-mail-address", flag.ExitOnError)
		mailAddressesDeleteMailAddressIDFlag = mailAddressesDeleteMailAddressFlags.String("id", "REQUIRED", "Unique mail ID")

		resultFlags = flag.NewFlagSet("result", flag.ContinueOnError)

		resultListResultsFlags     = flag.NewFlagSet("list-results", flag.ExitOnError)
		resultListResultsPageFlag  = resultListResultsFlags.String("page", "1", "")
		resultListResultsLimitFlag = resultListResultsFlags.String("limit", "10", "")

		resultCreateResultFlags    = flag.NewFlagSet("create-result", flag.ExitOnError)
		resultCreateResultBodyFlag = resultCreateResultFlags.String("body", "REQUIRED", "")
	)
	mailAddressesFlags.Usage = mailAddressesUsage
	mailAddressesListMailAddressesFlags.Usage = mailAddressesListMailAddressesUsage
	mailAddressesGetMailAddressesFlags.Usage = mailAddressesGetMailAddressesUsage
	mailAddressesCreateMailAddressFlags.Usage = mailAddressesCreateMailAddressUsage
	mailAddressesUpdateMailAddressFlags.Usage = mailAddressesUpdateMailAddressUsage
	mailAddressesDeleteMailAddressFlags.Usage = mailAddressesDeleteMailAddressUsage

	resultFlags.Usage = resultUsage
	resultListResultsFlags.Usage = resultListResultsUsage
	resultCreateResultFlags.Usage = resultCreateResultUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "mail-addresses":
			svcf = mailAddressesFlags
		case "result":
			svcf = resultFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "mail-addresses":
			switch epn {
			case "list-mail-addresses":
				epf = mailAddressesListMailAddressesFlags

			case "get-mail-addresses":
				epf = mailAddressesGetMailAddressesFlags

			case "create-mail-address":
				epf = mailAddressesCreateMailAddressFlags

			case "update-mail-address":
				epf = mailAddressesUpdateMailAddressFlags

			case "delete-mail-address":
				epf = mailAddressesDeleteMailAddressFlags

			}

		case "result":
			switch epn {
			case "list-results":
				epf = resultListResultsFlags

			case "create-result":
				epf = resultCreateResultFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     any
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "mail-addresses":
			c := mailaddressesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-mail-addresses":
				endpoint = c.ListMailAddresses()
				data, err = mailaddressesc.BuildListMailAddressesPayload(*mailAddressesListMailAddressesPageFlag, *mailAddressesListMailAddressesLimitFlag)
			case "get-mail-addresses":
				endpoint = c.GetMailAddresses()
				data, err = mailaddressesc.BuildGetMailAddressesPayload(*mailAddressesGetMailAddressesIDFlag)
			case "create-mail-address":
				endpoint = c.CreateMailAddress()
				data, err = mailaddressesc.BuildCreateMailAddressPayload(*mailAddressesCreateMailAddressBodyFlag)
			case "update-mail-address":
				endpoint = c.UpdateMailAddress()
				data, err = mailaddressesc.BuildUpdateMailAddressPayload(*mailAddressesUpdateMailAddressBodyFlag, *mailAddressesUpdateMailAddressIDFlag)
			case "delete-mail-address":
				endpoint = c.DeleteMailAddress()
				data, err = mailaddressesc.BuildDeleteMailAddressPayload(*mailAddressesDeleteMailAddressIDFlag)
			}
		case "result":
			c := resultc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list-results":
				endpoint = c.ListResults()
				data, err = resultc.BuildListResultsPayload(*resultListResultsPageFlag, *resultListResultsLimitFlag)
			case "create-result":
				endpoint = c.CreateResult()
				data, err = resultc.BuildCreateResultPayload(*resultCreateResultBodyFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// mailAddressesUsage displays the usage of the mail-addresses command and its
// subcommands.
func mailAddressesUsage() {
	fmt.Fprintf(os.Stderr, `Servicio de recoleccion de datos sobre el talon de pago
Usage:
    %[1]s [globalflags] mail-addresses COMMAND [flags]

COMMAND:
    list-mail-addresses: ListMailAddresses implements listMailAddresses.
    get-mail-addresses: Get mail address by ID
    create-mail-address: CreateMailAddress implements createMailAddress.
    update-mail-address: UpdateMailAddress implements updateMailAddress.
    delete-mail-address: DeleteMailAddress implements deleteMailAddress.

Additional help:
    %[1]s mail-addresses COMMAND --help
`, os.Args[0])
}
func mailAddressesListMailAddressesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mail-addresses list-mail-addresses -page INT -limit INT

ListMailAddresses implements listMailAddresses.
    -page INT: 
    -limit INT: 

Example:
    %[1]s mail-addresses list-mail-addresses --page 8115965748327412379 --limit 92
`, os.Args[0])
}

func mailAddressesGetMailAddressesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mail-addresses get-mail-addresses -id STRING

Get mail address by ID
    -id STRING: Unique mail ID

Example:
    %[1]s mail-addresses get-mail-addresses --id "Natus qui recusandae nemo sint laudantium."
`, os.Args[0])
}

func mailAddressesCreateMailAddressUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mail-addresses create-mail-address -body JSON

CreateMailAddress implements createMailAddress.
    -body JSON: 

Example:
    %[1]s mail-addresses create-mail-address --body '{
      "active": true,
      "address": "c"
   }'
`, os.Args[0])
}

func mailAddressesUpdateMailAddressUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mail-addresses update-mail-address -body JSON -id STRING

UpdateMailAddress implements updateMailAddress.
    -body JSON: 
    -id STRING: Unique mail ID

Example:
    %[1]s mail-addresses update-mail-address --body '{
      "active": true,
      "address": "iy"
   }' --id "Quidem voluptate est atque voluptates non qui."
`, os.Args[0])
}

func mailAddressesDeleteMailAddressUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] mail-addresses delete-mail-address -id STRING

DeleteMailAddress implements deleteMailAddress.
    -id STRING: Unique mail ID

Example:
    %[1]s mail-addresses delete-mail-address --id "Eligendi numquam explicabo et et."
`, os.Args[0])
}

// resultUsage displays the usage of the result command and its subcommands.
func resultUsage() {
	fmt.Fprintf(os.Stderr, `Service to collect data about the payment slip
Usage:
    %[1]s [globalflags] result COMMAND [flags]

COMMAND:
    list-results: ListResults implements listResults.
    create-result: CreateResult implements createResult.

Additional help:
    %[1]s result COMMAND --help
`, os.Args[0])
}
func resultListResultsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] result list-results -page INT -limit INT

ListResults implements listResults.
    -page INT: 
    -limit INT: 

Example:
    %[1]s result list-results --page 1230015249540505935 --limit 18
`, os.Args[0])
}

func resultCreateResultUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] result create-result -body JSON

CreateResult implements createResult.
    -body JSON: 

Example:
    %[1]s result create-result --body '{
      "status": "AVAILABLE, NOT_AVAILABLE or TIMEOUT"
   }'
`, os.Args[0])
}
