// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses HTTP server types
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package server

import (
	"unicode/utf8"

	mailaddresses "github.com/ynoacamino/alert-go/gen/mail_addresses"
	mailaddressesviews "github.com/ynoacamino/alert-go/gen/mail_addresses/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateMailAddressRequestBody is the type of the "MailAddresses" service
// "createMailAddress" endpoint HTTP request body.
type CreateMailAddressRequestBody struct {
	// Address of user mail
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Status of email address
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
}

// UpdateMailAddressRequestBody is the type of the "MailAddresses" service
// "updateMailAddress" endpoint HTTP request body.
type UpdateMailAddressRequestBody struct {
	// Address of user mail
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Status of email address
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
}

// ListMailAddressesResponseBody is the type of the "MailAddresses" service
// "listMailAddresses" endpoint HTTP response body.
type ListMailAddressesResponseBody struct {
	Data []*MailResponseBody `form:"data" json:"data" xml:"data"`
	// Page number
	Page int `form:"page" json:"page" xml:"page"`
	// Items per page
	Limit int `form:"limit" json:"limit" xml:"limit"`
	// Total number of mails
	Total int `form:"total" json:"total" xml:"total"`
}

// GetMailAddressesResponseBody is the type of the "MailAddresses" service
// "getMailAddresses" endpoint HTTP response body.
type GetMailAddressesResponseBody struct {
	// Unique mail ID
	ID string `form:"id" json:"id" xml:"id"`
	// Created at date of mail
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Updated at date of mail
	UpdateAt string `form:"updateAt" json:"updateAt" xml:"updateAt"`
	// Address of user mail
	Address string `form:"address" json:"address" xml:"address"`
	// Status of email address
	Active bool `form:"active" json:"active" xml:"active"`
}

// CreateMailAddressResponseBody is the type of the "MailAddresses" service
// "createMailAddress" endpoint HTTP response body.
type CreateMailAddressResponseBody struct {
	// Unique mail ID
	ID string `form:"id" json:"id" xml:"id"`
	// Created at date of mail
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Updated at date of mail
	UpdateAt string `form:"updateAt" json:"updateAt" xml:"updateAt"`
	// Address of user mail
	Address string `form:"address" json:"address" xml:"address"`
	// Status of email address
	Active bool `form:"active" json:"active" xml:"active"`
}

// GetMailAddressesNotFoundResponseBody is the type of the "MailAddresses"
// service "getMailAddresses" endpoint HTTP response body for the "not_found"
// error.
type GetMailAddressesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateMailAddressNotFoundResponseBody is the type of the "MailAddresses"
// service "updateMailAddress" endpoint HTTP response body for the "not_found"
// error.
type UpdateMailAddressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteMailAddressNotFoundResponseBody is the type of the "MailAddresses"
// service "deleteMailAddress" endpoint HTTP response body for the "not_found"
// error.
type DeleteMailAddressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// MailResponseBody is used to define fields on response body types.
type MailResponseBody struct {
	// Unique mail ID
	ID string `form:"id" json:"id" xml:"id"`
	// Created at date of mail
	CreatedAt string `form:"createdAt" json:"createdAt" xml:"createdAt"`
	// Updated at date of mail
	UpdateAt string `form:"updateAt" json:"updateAt" xml:"updateAt"`
	// Address of user mail
	Address string `form:"address" json:"address" xml:"address"`
	// Status of email address
	Active bool `form:"active" json:"active" xml:"active"`
}

// NewListMailAddressesResponseBody builds the HTTP response body from the
// result of the "listMailAddresses" endpoint of the "MailAddresses" service.
func NewListMailAddressesResponseBody(res *mailaddressesviews.MaillistView) *ListMailAddressesResponseBody {
	body := &ListMailAddressesResponseBody{
		Page:  *res.Page,
		Limit: *res.Limit,
		Total: *res.Total,
	}
	if res.Data != nil {
		body.Data = make([]*MailResponseBody, len(res.Data))
		for i, val := range res.Data {
			body.Data[i] = marshalMailaddressesviewsMailViewToMailResponseBody(val)
		}
	} else {
		body.Data = []*MailResponseBody{}
	}
	return body
}

// NewGetMailAddressesResponseBody builds the HTTP response body from the
// result of the "getMailAddresses" endpoint of the "MailAddresses" service.
func NewGetMailAddressesResponseBody(res *mailaddresses.Mail) *GetMailAddressesResponseBody {
	body := &GetMailAddressesResponseBody{
		ID:        res.ID,
		CreatedAt: res.CreatedAt,
		UpdateAt:  res.UpdateAt,
		Address:   res.Address,
		Active:    res.Active,
	}
	return body
}

// NewCreateMailAddressResponseBody builds the HTTP response body from the
// result of the "createMailAddress" endpoint of the "MailAddresses" service.
func NewCreateMailAddressResponseBody(res *mailaddresses.Mail) *CreateMailAddressResponseBody {
	body := &CreateMailAddressResponseBody{
		ID:        res.ID,
		CreatedAt: res.CreatedAt,
		UpdateAt:  res.UpdateAt,
		Address:   res.Address,
		Active:    res.Active,
	}
	return body
}

// NewGetMailAddressesNotFoundResponseBody builds the HTTP response body from
// the result of the "getMailAddresses" endpoint of the "MailAddresses" service.
func NewGetMailAddressesNotFoundResponseBody(res *goa.ServiceError) *GetMailAddressesNotFoundResponseBody {
	body := &GetMailAddressesNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateMailAddressNotFoundResponseBody builds the HTTP response body from
// the result of the "updateMailAddress" endpoint of the "MailAddresses"
// service.
func NewUpdateMailAddressNotFoundResponseBody(res *goa.ServiceError) *UpdateMailAddressNotFoundResponseBody {
	body := &UpdateMailAddressNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteMailAddressNotFoundResponseBody builds the HTTP response body from
// the result of the "deleteMailAddress" endpoint of the "MailAddresses"
// service.
func NewDeleteMailAddressNotFoundResponseBody(res *goa.ServiceError) *DeleteMailAddressNotFoundResponseBody {
	body := &DeleteMailAddressNotFoundResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListMailAddressesPayload builds a MailAddresses service listMailAddresses
// endpoint payload.
func NewListMailAddressesPayload(page int, limit int) *mailaddresses.ListMailAddressesPayload {
	v := &mailaddresses.ListMailAddressesPayload{}
	v.Page = page
	v.Limit = limit

	return v
}

// NewGetMailAddressesPayload builds a MailAddresses service getMailAddresses
// endpoint payload.
func NewGetMailAddressesPayload(id string) *mailaddresses.GetMailAddressesPayload {
	v := &mailaddresses.GetMailAddressesPayload{}
	v.ID = id

	return v
}

// NewCreateMailAddressMailPayload builds a MailAddresses service
// createMailAddress endpoint payload.
func NewCreateMailAddressMailPayload(body *CreateMailAddressRequestBody) *mailaddresses.MailPayload {
	v := &mailaddresses.MailPayload{
		Address: *body.Address,
	}
	if body.Active != nil {
		v.Active = *body.Active
	}
	if body.Active == nil {
		v.Active = true
	}

	return v
}

// NewUpdateMailAddressPayload builds a MailAddresses service updateMailAddress
// endpoint payload.
func NewUpdateMailAddressPayload(body *UpdateMailAddressRequestBody, id string) *mailaddresses.UpdateMailAddressPayload {
	v := &mailaddresses.UpdateMailAddressPayload{
		Address: *body.Address,
		Active:  *body.Active,
	}
	v.ID = id

	return v
}

// NewDeleteMailAddressPayload builds a MailAddresses service deleteMailAddress
// endpoint payload.
func NewDeleteMailAddressPayload(id string) *mailaddresses.DeleteMailAddressPayload {
	v := &mailaddresses.DeleteMailAddressPayload{}
	v.ID = id

	return v
}

// ValidateCreateMailAddressRequestBody runs the validations defined on
// CreateMailAddressRequestBody
func ValidateCreateMailAddressRequestBody(body *CreateMailAddressRequestBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.address", *body.Address, goa.FormatEmail))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1, true))
		}
	}
	return
}

// ValidateUpdateMailAddressRequestBody runs the validations defined on
// UpdateMailAddressRequestBody
func ValidateUpdateMailAddressRequestBody(body *UpdateMailAddressRequestBody) (err error) {
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.address", *body.Address, goa.FormatEmail))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1, true))
		}
	}
	return
}
