// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses HTTP server
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package server

import (
	"context"
	"net/http"

	mailaddresses "github.com/ynoacamino/alert-go/gen/mail_addresses"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the MailAddresses service endpoint HTTP handlers.
type Server struct {
	Mounts            []*MountPoint
	ListMailAddresses http.Handler
	GetMailAddresses  http.Handler
	CreateMailAddress http.Handler
	UpdateMailAddress http.Handler
	DeleteMailAddress http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the MailAddresses service endpoints
// using the provided encoder and decoder. The handlers are mounted on the
// given mux using the HTTP verb and path defined in the design. errhandler is
// called whenever a response fails to be encoded. formatter is used to format
// errors returned by the service methods prior to encoding. Both errhandler
// and formatter are optional and can be nil.
func New(
	e *mailaddresses.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListMailAddresses", "GET", "/mail-address"},
			{"GetMailAddresses", "GET", "/mail-address/{id}"},
			{"CreateMailAddress", "POST", "/mail-address"},
			{"UpdateMailAddress", "PUT", "/mail-address/{id}"},
			{"DeleteMailAddress", "DELETE", "/mail-address/{id}"},
		},
		ListMailAddresses: NewListMailAddressesHandler(e.ListMailAddresses, mux, decoder, encoder, errhandler, formatter),
		GetMailAddresses:  NewGetMailAddressesHandler(e.GetMailAddresses, mux, decoder, encoder, errhandler, formatter),
		CreateMailAddress: NewCreateMailAddressHandler(e.CreateMailAddress, mux, decoder, encoder, errhandler, formatter),
		UpdateMailAddress: NewUpdateMailAddressHandler(e.UpdateMailAddress, mux, decoder, encoder, errhandler, formatter),
		DeleteMailAddress: NewDeleteMailAddressHandler(e.DeleteMailAddress, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "MailAddresses" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListMailAddresses = m(s.ListMailAddresses)
	s.GetMailAddresses = m(s.GetMailAddresses)
	s.CreateMailAddress = m(s.CreateMailAddress)
	s.UpdateMailAddress = m(s.UpdateMailAddress)
	s.DeleteMailAddress = m(s.DeleteMailAddress)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return mailaddresses.MethodNames[:] }

// Mount configures the mux to serve the MailAddresses endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListMailAddressesHandler(mux, h.ListMailAddresses)
	MountGetMailAddressesHandler(mux, h.GetMailAddresses)
	MountCreateMailAddressHandler(mux, h.CreateMailAddress)
	MountUpdateMailAddressHandler(mux, h.UpdateMailAddress)
	MountDeleteMailAddressHandler(mux, h.DeleteMailAddress)
}

// Mount configures the mux to serve the MailAddresses endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListMailAddressesHandler configures the mux to serve the
// "MailAddresses" service "listMailAddresses" endpoint.
func MountListMailAddressesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/mail-address", f)
}

// NewListMailAddressesHandler creates a HTTP handler which loads the HTTP
// request and calls the "MailAddresses" service "listMailAddresses" endpoint.
func NewListMailAddressesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListMailAddressesRequest(mux, decoder)
		encodeResponse = EncodeListMailAddressesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "listMailAddresses")
		ctx = context.WithValue(ctx, goa.ServiceKey, "MailAddresses")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetMailAddressesHandler configures the mux to serve the "MailAddresses"
// service "getMailAddresses" endpoint.
func MountGetMailAddressesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/mail-address/{id}", f)
}

// NewGetMailAddressesHandler creates a HTTP handler which loads the HTTP
// request and calls the "MailAddresses" service "getMailAddresses" endpoint.
func NewGetMailAddressesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetMailAddressesRequest(mux, decoder)
		encodeResponse = EncodeGetMailAddressesResponse(encoder)
		encodeError    = EncodeGetMailAddressesError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "getMailAddresses")
		ctx = context.WithValue(ctx, goa.ServiceKey, "MailAddresses")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateMailAddressHandler configures the mux to serve the
// "MailAddresses" service "createMailAddress" endpoint.
func MountCreateMailAddressHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/mail-address", f)
}

// NewCreateMailAddressHandler creates a HTTP handler which loads the HTTP
// request and calls the "MailAddresses" service "createMailAddress" endpoint.
func NewCreateMailAddressHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateMailAddressRequest(mux, decoder)
		encodeResponse = EncodeCreateMailAddressResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "createMailAddress")
		ctx = context.WithValue(ctx, goa.ServiceKey, "MailAddresses")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdateMailAddressHandler configures the mux to serve the
// "MailAddresses" service "updateMailAddress" endpoint.
func MountUpdateMailAddressHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PUT", "/mail-address/{id}", f)
}

// NewUpdateMailAddressHandler creates a HTTP handler which loads the HTTP
// request and calls the "MailAddresses" service "updateMailAddress" endpoint.
func NewUpdateMailAddressHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdateMailAddressRequest(mux, decoder)
		encodeResponse = EncodeUpdateMailAddressResponse(encoder)
		encodeError    = EncodeUpdateMailAddressError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "updateMailAddress")
		ctx = context.WithValue(ctx, goa.ServiceKey, "MailAddresses")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteMailAddressHandler configures the mux to serve the
// "MailAddresses" service "deleteMailAddress" endpoint.
func MountDeleteMailAddressHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/mail-address/{id}", f)
}

// NewDeleteMailAddressHandler creates a HTTP handler which loads the HTTP
// request and calls the "MailAddresses" service "deleteMailAddress" endpoint.
func NewDeleteMailAddressHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteMailAddressRequest(mux, decoder)
		encodeResponse = EncodeDeleteMailAddressResponse(encoder)
		encodeError    = EncodeDeleteMailAddressError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "deleteMailAddress")
		ctx = context.WithValue(ctx, goa.ServiceKey, "MailAddresses")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
