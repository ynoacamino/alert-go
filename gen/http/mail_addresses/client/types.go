// Code generated by goa v3.20.0, DO NOT EDIT.
//
// MailAddresses HTTP client types
//
// Command:
// $ goa gen github.com/ynoacamino/alert-go/design

package client

import (
	"unicode/utf8"

	mailaddresses "github.com/ynoacamino/alert-go/gen/mail_addresses"
	mailaddressesviews "github.com/ynoacamino/alert-go/gen/mail_addresses/views"
	goa "goa.design/goa/v3/pkg"
)

// CreateMailAddressRequestBody is the type of the "MailAddresses" service
// "createMailAddress" endpoint HTTP request body.
type CreateMailAddressRequestBody struct {
	// Address of user mail
	Address string `form:"address" json:"address" xml:"address"`
	// Status of email address
	Active bool `form:"active" json:"active" xml:"active"`
}

// UpdateMailAddressRequestBody is the type of the "MailAddresses" service
// "updateMailAddress" endpoint HTTP request body.
type UpdateMailAddressRequestBody struct {
	// Address of user mail
	Address string `form:"address" json:"address" xml:"address"`
	// Status of email address
	Active bool `form:"active" json:"active" xml:"active"`
}

// ListMailAddressesResponseBody is the type of the "MailAddresses" service
// "listMailAddresses" endpoint HTTP response body.
type ListMailAddressesResponseBody struct {
	Data []*MailResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
	// Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" xml:"page,omitempty"`
	// Items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" xml:"limit,omitempty"`
	// Total number of mails
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// GetMailAddressesResponseBody is the type of the "MailAddresses" service
// "getMailAddresses" endpoint HTTP response body.
type GetMailAddressesResponseBody struct {
	// Unique mail ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Created at date of mail
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Updated at date of mail
	UpdateAt *string `form:"updateAt,omitempty" json:"updateAt,omitempty" xml:"updateAt,omitempty"`
	// Address of user mail
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Status of email address
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
}

// CreateMailAddressResponseBody is the type of the "MailAddresses" service
// "createMailAddress" endpoint HTTP response body.
type CreateMailAddressResponseBody struct {
	// Unique mail ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Created at date of mail
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Updated at date of mail
	UpdateAt *string `form:"updateAt,omitempty" json:"updateAt,omitempty" xml:"updateAt,omitempty"`
	// Address of user mail
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Status of email address
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
}

// GetMailAddressesNotFoundResponseBody is the type of the "MailAddresses"
// service "getMailAddresses" endpoint HTTP response body for the "not_found"
// error.
type GetMailAddressesNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateMailAddressNotFoundResponseBody is the type of the "MailAddresses"
// service "updateMailAddress" endpoint HTTP response body for the "not_found"
// error.
type UpdateMailAddressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteMailAddressNotFoundResponseBody is the type of the "MailAddresses"
// service "deleteMailAddress" endpoint HTTP response body for the "not_found"
// error.
type DeleteMailAddressNotFoundResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// MailResponseBody is used to define fields on response body types.
type MailResponseBody struct {
	// Unique mail ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Created at date of mail
	CreatedAt *string `form:"createdAt,omitempty" json:"createdAt,omitempty" xml:"createdAt,omitempty"`
	// Updated at date of mail
	UpdateAt *string `form:"updateAt,omitempty" json:"updateAt,omitempty" xml:"updateAt,omitempty"`
	// Address of user mail
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
	// Status of email address
	Active *bool `form:"active,omitempty" json:"active,omitempty" xml:"active,omitempty"`
}

// NewCreateMailAddressRequestBody builds the HTTP request body from the
// payload of the "createMailAddress" endpoint of the "MailAddresses" service.
func NewCreateMailAddressRequestBody(p *mailaddresses.MailPayload) *CreateMailAddressRequestBody {
	body := &CreateMailAddressRequestBody{
		Address: p.Address,
		Active:  p.Active,
	}
	{
		var zero bool
		if body.Active == zero {
			body.Active = true
		}
	}
	return body
}

// NewUpdateMailAddressRequestBody builds the HTTP request body from the
// payload of the "updateMailAddress" endpoint of the "MailAddresses" service.
func NewUpdateMailAddressRequestBody(p *mailaddresses.UpdateMailAddressPayload) *UpdateMailAddressRequestBody {
	body := &UpdateMailAddressRequestBody{
		Address: p.Address,
		Active:  p.Active,
	}
	return body
}

// NewListMailAddressesMaillistOK builds a "MailAddresses" service
// "listMailAddresses" endpoint result from a HTTP "OK" response.
func NewListMailAddressesMaillistOK(body *ListMailAddressesResponseBody) *mailaddressesviews.MaillistView {
	v := &mailaddressesviews.MaillistView{
		Page:  body.Page,
		Limit: body.Limit,
		Total: body.Total,
	}
	v.Data = make([]*mailaddressesviews.MailView, len(body.Data))
	for i, val := range body.Data {
		v.Data[i] = unmarshalMailResponseBodyToMailaddressesviewsMailView(val)
	}

	return v
}

// NewGetMailAddressesMailOK builds a "MailAddresses" service
// "getMailAddresses" endpoint result from a HTTP "OK" response.
func NewGetMailAddressesMailOK(body *GetMailAddressesResponseBody) *mailaddresses.Mail {
	v := &mailaddresses.Mail{
		ID:        *body.ID,
		CreatedAt: *body.CreatedAt,
		UpdateAt:  *body.UpdateAt,
		Address:   *body.Address,
		Active:    *body.Active,
	}

	return v
}

// NewGetMailAddressesNotFound builds a MailAddresses service getMailAddresses
// endpoint not_found error.
func NewGetMailAddressesNotFound(body *GetMailAddressesNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateMailAddressMailCreated builds a "MailAddresses" service
// "createMailAddress" endpoint result from a HTTP "Created" response.
func NewCreateMailAddressMailCreated(body *CreateMailAddressResponseBody) *mailaddresses.Mail {
	v := &mailaddresses.Mail{
		ID:        *body.ID,
		CreatedAt: *body.CreatedAt,
		UpdateAt:  *body.UpdateAt,
		Address:   *body.Address,
		Active:    *body.Active,
	}

	return v
}

// NewUpdateMailAddressNotFound builds a MailAddresses service
// updateMailAddress endpoint not_found error.
func NewUpdateMailAddressNotFound(body *UpdateMailAddressNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteMailAddressNotFound builds a MailAddresses service
// deleteMailAddress endpoint not_found error.
func NewDeleteMailAddressNotFound(body *DeleteMailAddressNotFoundResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateGetMailAddressesResponseBody runs the validations defined on
// GetMailAddressesResponseBody
func ValidateGetMailAddressesResponseBody(body *GetMailAddressesResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.UpdateAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updateAt", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.address", *body.Address, goa.FormatEmail))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1, true))
		}
	}
	return
}

// ValidateCreateMailAddressResponseBody runs the validations defined on
// CreateMailAddressResponseBody
func ValidateCreateMailAddressResponseBody(body *CreateMailAddressResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.UpdateAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updateAt", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.address", *body.Address, goa.FormatEmail))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1, true))
		}
	}
	return
}

// ValidateGetMailAddressesNotFoundResponseBody runs the validations defined on
// getMailAddresses_not_found_response_body
func ValidateGetMailAddressesNotFoundResponseBody(body *GetMailAddressesNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateMailAddressNotFoundResponseBody runs the validations defined
// on updateMailAddress_not_found_response_body
func ValidateUpdateMailAddressNotFoundResponseBody(body *UpdateMailAddressNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteMailAddressNotFoundResponseBody runs the validations defined
// on deleteMailAddress_not_found_response_body
func ValidateDeleteMailAddressNotFoundResponseBody(body *DeleteMailAddressNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateMailResponseBody runs the validations defined on MailResponseBody
func ValidateMailResponseBody(body *MailResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	if body.Active == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("active", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("createdAt", "body"))
	}
	if body.UpdateAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updateAt", "body"))
	}
	if body.Address != nil {
		err = goa.MergeErrors(err, goa.ValidateFormat("body.address", *body.Address, goa.FormatEmail))
	}
	if body.Address != nil {
		if utf8.RuneCountInString(*body.Address) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.address", *body.Address, utf8.RuneCountInString(*body.Address), 1, true))
		}
	}
	return
}
